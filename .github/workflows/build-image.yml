name: Build Docker Image
on:
  create:
    tags:
      - '*'
jobs:
  run-tests:
    runs-on: ubuntu-latest
    services:
      db:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: shopping_list_test
          MYSQL_USER: shopping_list
          MYSQL_PASSWORD: shopping_list
          MYSQL_ROOT_PASSWORD: password
        ports:
          - "3306:3306"
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: setup open ssl
        run: |
          sudo apt-get install openssl -y
      - name: Running tests
        env:
          APP_ENV: test
          APP_DEBUG: true
          DATABASE_URL: "mysql://shopping_list:shopping_list@127.0.0.1:3306/shopping_list_test?server_version=8"
        run: ./bin/run_tests.sh
  build-image:
    name: Building docker image
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 1
      - name: Fetching latest tags
        run: echo "name=$(echo $GITHUB_REF | sed 's/.*\///g' )" >> $GITHUB_ENV
      - name: Publishing PHP Image to Docker Hub
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: ndy40/production
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          tags: php-${{ env.CURRENT_TAG }}
          cache: true
          buildoptions: "--target server_php"
          buildargs: APP_ENV=prod
          context: server/
      - name: Publishing Nginx Image to Docker Hub
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: ndy40/production
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          tags: nginx-${{ env.CURRENT_TAG }}
          cache: true
          buildoptions: "--target server_nginx"
          buildargs: APP_ENV=prod
          context: server/
  deploy-to-server:
    name: Deploy newly built image to server
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 1
      - name: Create .env file
        env:
          env_secret: ${{ secrets.APP_ENV }}
        run: ./.github/scripts/encrypt_env.sh
      - name: Fetching latest tags
        run: echo "name=$(echo $GITHUB_REF | sed 's/.*\///g' )" >> $GITHUB_ENV
      - name: Add Private SSH KEY to SSH Agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE }}"
      - name: Copy Files to Remote
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          sed "s/CURRENT_TAG/$CURRENT_TAG/g" docker-compose.tmpl > docker-compose.prod.yml
          scp -o StrictHostKeyChecking=no -r ./.env ./docker-compose.prod.yml ${{ secrets.SERVER_USER}}@${{ secrets.SERVER_IP }}:${{secrets.DEPLOY_PATH}}
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER}}@${{ secrets.SERVER_IP }} << 'ENDSSH'
            source .env
            cd lsg_app/
            mv docker-compose.prod.yml docker-compose.yml
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}
            docker-compose down --rmi all --remove-orphans
            docker-compose up -d
          ENDSSH
